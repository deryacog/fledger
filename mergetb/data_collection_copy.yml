---
- name: Setup and run signal tasks
  hosts: SIGNAL_NODE
  become: yes
  vars:
    docker_image: deryacog/flsignal:latest
    container_name: flsignal
  tasks:
    - name: Pull flsignal Docker image
      docker_image:
        name: "{{ docker_image }}"
        source: pull
        force_source: true

    - name: Run flsignal container
      docker_container:
        name: "{{ container_name }}"
        image: "{{ docker_image }}"
        state: started
        detach: true
        command: >
          -v
        network_mode: host
        ports:
          - "8765:8765"
        log_driver: "json-file"
        log_options:
          max-size: "10m"
          max-file: "4"
        output_logs: yes
        env:
          RUST_BACKTRACE: "full"

    - name: Wait for 10 seconds to ensure flsignal is running
      pause:
        seconds: 10

- name: Run simulations with different configurations
  hosts: FLEDGER_NODES
  vars:
    configs_dir: "/home/dcog/"
    data_dir: "/home/dcog/data"
    path_len: "{{ path_len }}"
    retry: "{{ retry }}"
    docker_image: deryacog/fledger:latest
    signal_node: "{{ hostvars[groups['SIGNAL_NODE'][0]].ansible_host }}"

  tasks:
    - name: Pull fledger Docker image
      docker_image:
        name: "{{ docker_image }}"
        source: pull
        force_source: true

    - name: Run fledger container
      docker_container:
        name: "fledger_{{ inventory_hostname }}"
        image: "{{ docker_image }}"
        state: started
        detach: true
        volumes:
          - "{{ data_dir }}:/fledger/data"
        command: >
          --config /fledger/data
          --name {{ inventory_hostname }}
          {% if inventory_hostname == 'node-1' %}
          --path-len {{ path_len }}
          {% endif %}
          -s ws://{{ signal_node }}:8765
          --retry {{ retry }}
        network_mode: host
        log_driver: "json-file"
        output_logs: yes
        log_options:
          max-size: "10m"
          max-file: "4"
        env:
          RUST_BACKTRACE: "full"
      register: fledger_container

    - name: Wait for 2 minutes while fledger runs
      pause:
        seconds: 120

    - name: Stop existing fledger container if present
      docker_container:
        name: "fledger_{{ inventory_hostname }}"
        state: stopped
      ignore_errors: false

    - name: Fetch a file from the remote node
      fetch:
        src: /fledger/data/metrics_{{ config_file_name }}.txt
        dest: "./metrics/metrics_{{ config_file_name }}_{{ inventory_hostname }}.txt"

    - name: Wait a bit before starting the next simulation
      pause:
        seconds: 10
